
Statement & PreparedStatement 차이점

미묘한 차이가 있다.
1. PreparedStatement ?를 사용하여 문장을 좀 더 간결하게 직관적으로 표현할 수 있다.
2. Statement은 Connection 의 createStatement() 함수가 사용된다.
3. PreparedStatement는  set()함수가 사용된다. 정수일 경우 setInt()를 사용한다.
4. Statement는 excecuteUpdate()함수를 호출할 때 sql을 입력 파라미터로 전달한다.
5. PreparedStatement는 executeUpdate() 함수에 파라미터를 입력하지 않는다.

Statement
->
String sql = "INSERT INTO user(id, password, name) VALUES
			('"+uid+"', '"+upass+"','"+uname+"')";
			
Statement stmt = conn.createStatement();
stmt.executeUpdate(sql);

PreparedStatement
->
String sql = "INSERT INTO user(id,password,name) VALUES(?,?,?)";
PreparedStatement pstmtm = conn.prepareStatement(sql);
	pstmt.setString(1, uid);
	pstmt.setString(2, upass);
	pstmt.setString(3, uname);
pstmt.executeUpdate();


데이터베이스 커넥션 풀

왜?
JDBC 로 DB에 접근할 때 가장 많은 자원이 소모되는 부분은 DB연동에 필요한 conn객체를 생성하는 부분이다.
지금까지는 SQL문을 수행하기 위해서 conn객체를 생성하고 제거하는 과정을 반복해왔다.
이것은 사이트에 접근하는 유저들이 증가할 경우 시스템의 성능을 급격하게 저하시키게 된다.

이러한 문제점을 해결하는 방법 중의 하나가 바로 database connection pool을 이용하는 방법이다.

커넥션 풀을 이용하게 되면 사용자가 요청할 때마다 매번 새로운 conn 객체를 생성하는 것이 아니라.
일정한 개수의 conn객체를 미리 생성한다음 사용자의 요청이 있을 때마다 가용한 객체를 할당하는 방식을 사용한다.

WebContent - META-INF
context.xml - DB연결 설정, 아이디, 비번, 사용 db 커넥션 갯수, 최소 유지 connection수...등등 기본설정
Java Resources - src - util
ConnectionPool.java - 실제 연결 구현


<?xml version="1.0" encoding="UTF-8"?>
<Context>			//설정 시작
	<Resourse name="jdbc/dantalk"		// 자원 정의 DB명을 넣어준다.
		auth="Container"			// 사용할 DB인증 데이터 설정
		type="javax.sql.DataSource"
		driverClassName="com.mysql.jdbc.Driver"
		url="jdbc:mysql://localhost:3306/dantalk?serverTimezone=UTC"
		username="root"		//데이터베이스 아이디
		password="0000"		//데이터베이스 비번
		maxTotal="16"		//커넥션 풀에서 유지될 수 있는 conn 객체의 '최대 개수'
		maxIdle="4"			//커넥션 풀에서 유지되어야 할 conn객체의 최소 개수
		maxWaitMills="-1"  /> 커넥션 풀에서 가용한 conn 객체가 없을 경우 대기 시간을 지정-1로 설정하면
							바로 가용 자원이 없읆을 알려주는 오류메세지가 전달된다.
</Context>


package util;

import java.sql.*;
import javax.naming.*;
import javax.sql.*;

public class ConnectionPool {
	
	private static DataSource _ds = null;
	
	public static Connection get() throws NamingException, SQLException{
		if(_ds == null) {
			_ds = (DataSource)(new InitialContext()).lookup(
					"java:comp/env/jdbc/dantalk");
					
		}
		return _ds.getConnection();
	}
}
